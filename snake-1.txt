; ------------------------------------
;   snake game by foreverflank
;   in my very own assembly language
;   for my pfc-8-mini cpu
; ------------------------------------

; ram addresses:
;   00 - 3f: snake x pos array
;   40 - 7f: snake y pos array
;   82: last button input
;   83: snake length
;   88: latest snake x pos
;   89: latest snake y pos
;   90: food x pos
;   91: food y pos


immh 0x8    ; move right by default
imml 0x2
mov r6 r1
immh 0x0
imml 0x1
mov r5 r1
st

immh 0x8      ; set snake length to 1
imml 0x3
mov r6 r1
st

; i think this section is pretty self-explanatory
label food
    mov r1 r7
    shr
    shr
    shr
    shr
    mov r3 r1
    immh 0x0
    imml 0x7
    and r3
    mov r5 r1

    immh 0x9
    imml 0x0
    mov r6 r1
    st

    mov r1 r7
    shr
    shr
    shr
    shr
    mov r3 r1
    immh 0x0
    imml 0x7
    and r3
    mov r5 r1

    immh 0x9
    imml 0x1
    mov r6 r1
    st

    jmp
    food_fin

label loop

    ; update move direction
        immh 0x8    ; get previous move at 0x82
        imml 0x2
        mov r6 r1
        ld          ; previous move is now in r5

        mov r3 r7   ; get current button input
        immh 0x0
        imml 0xf
        and r3      ; check if lower nibble is zero
        
        jnz         ; if some button pressed, don't use previous move
        prev_move   ; otherwise use it from r5
            mov r3 r5
        label prev_move

        mov r5 r3   ; store move back
        st
    ; ----------

    ; move snake x
        mov r6 r0   ; load snake head's x from 0x00
        ld

        imml 0x1    ; move right bitmask
        and r3
        jz
        right
            imml 0x1
            add r5
            mov r5 r1
            jmp
            mod_8_x
        label right

        imml 0x4    ; move left bitmask
        and r3
        jz
        left
            imml 15
            add r5
            mov r5 r1
            jmp
            mod_8_x
        label left

        ; if neither moved left nor right
        immh 0x8    ; store final x at 0x88
        imml 0x8
        mov r6 r1
        st
        jmp         ; then move up or down
        move_y

        label mod_8_x
            immh 0x0
            imml 0x7
            and r5
            mov r5 r1

        ; if moved left or right
        immh 0x8    ; store final x at 0x88
        imml 0x8
        mov r6 r1
        st
        jmp         ; move finished
        move_fin
    ; ----------

    ; move snake y
    label move_y
        immh 0x4    ; load snake head's y from 0x40
        imml 0x0
        mov r6 r1
        ld

        immh 0x0    ; move down bitmask
        imml 0x8
        and r3
        jz
        down
            imml 0x1
            add r5
            mov r5 r1
            jmp
            mod_8_y
        label down

        immh 0x0      ; move up bitmask
        imml 0x2
        and r3
        jz
        up
            imml 0xf
            add r5
            mov r5 r1
            jmp
            mod_8_y
        label up

        label mod_8_y
            immh 0x0
            imml 0x7
            and r5
            mov r5 r1

        immh 0x8    ; store final y at 0x89
        imml 0x9
        mov r6 r1
        st

        label move_fin
    ; ----------

    ; snake length
        immh 0x8    ; get snake length at 0x83
        imml 0x3
        mov r6 r1
        ld
        mov r2 r5   ; keep snake length in r2
    ; ----------

    ; clear tail
        mov r6 r2   ; get tail x
        ld
        mov r1 r5
        immh 0b1000 ; set cursor x
        mov r7 r1

        immh 0x4    ; get tail y
        imml 0x0
        add r2
        mov r6 r1
        ld
        mov r1 r5
        immh 0b1001 ; set cursor y
        mov r7 r1

        immh 0x2    ; print space
        imml 0x0
        mov r7 r1
    ; ----------  

    ; check if food eaten
        immh 0x9    ; load food x from 0x90
        imml 0x0
        mov r6 r1
        ld
        mov r3 r5   ; store in r3
        immh 0x8    ; load snake x from 0x88
        imml 0x8
        mov r6 r1
        ld
        mov r1 r5   ; move to r1
        sub r3      ; compare with r3
        jnz         ; jump if x pos not the same
        food_fin

        immh 0x9    ; load food y from 0x91
        imml 0x1
        mov r6 r1
        ld
        mov r3 r5   ; store in r3
        immh 0x8    ; load snake y from 0x89
        imml 0x9
        mov r6 r1
        ld
        mov r1 r5   ; move to r1
        sub r3      ; compare with r3
        jnz         ; jump if y pos not the same
        food_fin
    ; ----------

    ; increase snake's length by 1
    immh 0x8
    imml 0x3
    mov r6 r1
    immh 0x0
    imml 0x1
    add r2
    mov r2 r1
    mov r5 r1
    st
    ; ----------

    ; generate new food
    jmp
    food

label food_fin

    ; shift snake positions
    immh 0x3    ; max snake length is 63
    imml 0xf
    mov r4 r1   ; keep it in r4

    label shift
        immh 0xf    ; decrement r4
        imml 0xf
        add r4
        mov r4 r1

        mov r6 r4   ; load x from ram[i-1]
        ld
        mov r3 r5   ; keep in r3
        immh 0x4    ; r6 += 40
        imml 0x0
        add r6      
        mov r6 r1   
        ld          ; load y from ram[i-1+40] to r5

        immh 0x0    ; increment r6
        imml 0x1
        add r6
        mov r6 r1
        st          ; store r5 at ram[i+40]

        immh 0xC    ; r6 -= 40
        imml 0x0
        add r6
        mov r6 r1
        mov r5 r3
        st          ; store r3 at ram[i]

        mov r1 r0   ; check if r4 is zero
        add r4
        jnz
        shift
    ; ----------

    ; draw food
    immh 0x9    ; get food y from 0x91
    imml 0x1
    mov r6 r1
    ld
    mov r1 r5
    immh 0b1001
    mov r7 r1   ; set cursor y

    imml 0x0    ; get food x from 0x90
    mov r6 r1
    ld
    mov r1 r5
    immh 0b1000
    mov r7 r1   ; set cursor x

    immh 0x4    ; print "F"
    imml 0x6
    mov r7 r1
    ; ----------

    ; draw snake head
    immh 0x8    ; load x from 0x88
    imml 0x8
    mov r6 r1
    ld
    mov r6 r0
    st          ; store x at 0x00
    mov r1 r5   
    immh 0b1000
    mov r7 r1   ; set cursor x

    immh 0x8    ; load y from 0x89
    imml 0x9
    mov r6 r1
    ld
    immh 0x4
    imml 0x0      
    mov r6 r1
    st          ; store y at 0x40
    mov r1 r5   
    immh 0b1001
    mov r7 r1   ; set cursor y

    immh 0x5    ; print "S"
    imml 0x3
    mov r7 r1
    ; ----------

jmp
loop